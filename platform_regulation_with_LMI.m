clear;
close all;

%Define the initial state variables

x0=[0;0;0;0];

m=0.15;J=750;Ca=1.5;h=0.1;k=5;g=9.81;

parameters=[m,J,Ca,h,k];

%% Search for a specified operating point for the model - platform_trim.
%
% This MATLAB script is the command line equivalent of the trim model
% tab in linear analysis tool with current specifications and options.
% It produces the exact same operating points as hitting the Trim button.

% MATLAB(R) file generated by MATLAB(R) 9.12 and Simulink Control Design (TM) 6.1.
%
% Generated on: 21-May-2022 08:57:53

%% Specify the model name
model = 'platform_trim';

%% Create the operating point specification object.
opspec = operspec(model);

%% Set the constraints on the states in the model.
% - The defaults for all states are Known = false, SteadyState = true,
%   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.

% State (1) - platform_trim/S-Function Builder
opspec.States(1).x = [0;0;0.369;0.258];
opspec.States(1).Known = [true;true;false;false];

%% Set the constraints on the inputs in the model.
% - The defaults for all inputs are Known = false, Min = -Inf, and
% Max = Inf.

% Input (1) - platform_trim/In1
opspec.Inputs(1).u = [0.256;0];
opspec.Inputs(1).Known = [false;true];

%% Set the constraints on the outputs in the model.
% - The defaults for all outputs are Known = false, Min = -Inf, and
% Max = Inf.

% Output (1) - platform_trim/Out1
% - Default model initial conditions are used to initialize optimization.


%% Create the options
opt = findopOptions('DisplayReport','iter');

%% Perform the operating point search.
[op,opreport] = findop(model,opspec,opt);
%%Exctract the equilibrium
xeq=op.States.x;
ueq=op.Inputs.u;

%Compute the linearized plant using linmod
[Ac,Bc0,Cc,Dc0]=linmod('platform_trim',xeq,ueq);

%sampling time
Ts=0.5;

Bc=Bc0(:,1); %Actuator column
Dc=Dc0(:,1);

%Plant dimensions instrumental to LQ regulation

[nx,nu]=size(Bc);

%Let us compute discretized plant

platform_tc=ss(Ac,Bc,Cc,Dc);

platform_td=c2d(platform_tc,Ts);

%Extract the matrices

[A,B,C,D]=ssdata(platform_td);

% Define lq parameters
Cz=[1 0 0 0;
   0 1 0 0;
   0 0 0 0];

[nz,nx]=size(Cz);

sqrtrho=.01;

Dzu=sqrtrho*[0;0;1];

%Number of steps

tfin=10;

N=ceil(tfin/Ts);


%Online part

% Online part

% Vectors collecting the state, input and time trend taken from Simulink

xseq=[];

useq=[];

tseq=[];

%Initial state which depicts perturbation w.r.t to the equilibrium

dx0=[0.1;0.1;0.1;0.1];

xInitial=xeq+dx0;
%
% LMI Section

ops=sdpsettings('verbose',0);

% LMI variables alpha, Y, K

alpha=sdpvar(1);

Y=sdpvar(nx);

K=sdpvar(nu,nx);% LMI constraints


% Normalized Upper bound


V1=[1 dx0';
    dx0 Y] >= 0;


% Y positive

V2=Y >= 0;

% Riccati discrete time inequality (LMI version)


V3 = [Y Y*A'-K'*B' Y*Cz'-K'*Dzu';
      A*Y-B*K  Y zeros(nx,nz);
      Cz*Y-Dzu*K zeros(nz,nx) alpha*eye(nz)] >= 0;

% Constraints alltogether

V=[V1,V2,V3];


% Optimze

lmi_result=optimize(V,alpha,ops);

% F and X (original variables)

F_lmi = double(K)*inv(double(Y));

X_lmi = double(alpha)*inv(double(Y));

tic
for i=1:N;

    %current input move

    u=[-F_lmi*(xInitial-xeq)+ueq(1);ueq(2)]';

    % current sampling time

    t=(i-1)*Ts;

    result=sim("platform_sim");

    xseq=[xseq result.xout'];
    
    useq=[useq u(1).*ones(1,length(result.tout))];

    tseq=[tseq result.tout'];

    xInitial=result.xFinal';
end    
toc

subplot(3,1,1);
plot(tseq,xseq(1,:),'LineWidth',2);
grid;
title('Position');

subplot(3,1,2);
plot(tseq,xseq(3,:),'LineWidth',2);
grid;
title('Angular Displacement');

subplot(3,1,3);
plot(tseq,useq,'LineWidth',2);
grid;
title('Torque');

