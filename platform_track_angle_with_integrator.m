clear;
close all;

%Define the initial state variables

x0=[0;0;0;0];

m=0.15;J=750;Ca=1.5;h=0.1;k=5;g=9.81;

parameters=[m,J,Ca,h,k];

%% Search for a specified operating point for the model - platform_trim.
%
% This MATLAB script is the command line equivalent of the trim model
% tab in linear analysis tool with current specifications and options.
% It produces the exact same operating points as hitting the Trim button.

% MATLAB(R) file generated by MATLAB(R) 9.12 and Simulink Control Design (TM) 6.1.
%
% Generated on: 21-May-2022 08:57:53

%% Specify the model name
model = 'platform_trim';

%% Create the operating point specification object.
opspec = operspec(model);

%% Set the constraints on the states in the model.
% - The defaults for all states are Known = false, SteadyState = true,
%   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.

% State (1) - platform_trim/S-Function Builder
opspec.States(1).x = [0;0;0.369;0.258];
opspec.States(1).Known = [true;true;false;false];

%% Set the constraints on the inputs in the model.
% - The defaults for all inputs are Known = false, Min = -Inf, and
% Max = Inf.

% Input (1) - platform_trim/In1
opspec.Inputs(1).u = [0.256;0];
opspec.Inputs(1).Known = [false;true];

%% Set the constraints on the outputs in the model.
% - The defaults for all outputs are Known = false, Min = -Inf, and
% Max = Inf.

% Output (1) - platform_trim/Out1
% - Default model initial conditions are used to initialize optimization.


%% Create the options
opt = findopOptions('DisplayReport','iter');

%% Perform the operating point search.
[op,opreport] = findop(model,opspec,opt);
%%Exctract the equilibrium
xeq=op.States.x;
ueq=op.Inputs.u;

%Compute the linearized plant using linmod
[Ac,Bc0,Cc,Dc0]=linmod('platform_trim',xeq,ueq);

Bc=Bc0(:,1);  % Actuator column

Dc=Dc0(:,1);
%Plant dimensions instrumental to LQ regulation

[nx,nu]=size(Bc);

%sampling time

Ts=0.5;

Cy=[0 1 0 0];    % Position track

% Defining the matrices of the exosystem

Arc=0;

Cr=1;

% Discretize Arc  Ar=expm(Arc*Ts);

Ar=expm(Arc*Ts);

[nr,nr]=size(Ar);  % number of "references" generated by the exosystem

%Let us compute discretized plant

platform_tc=ss(Ac,Bc,Cc,Dc);

platform_td=c2d(platform_tc,Ts);

%Extract the matrices

[A00,B00,C00,D00]=ssdata(platform_td);

% Augmented System with the adder input structure

A0=[A00 B00;
    zeros(nu,nx) eye(nu)];

B0=[B00;eye(nu)];

% Complete augmented system with the exosystem (in this case the step
% reference generator

A=blkdiag(A0,Ar);
B=[B0;zeros(nr,nu)];

% Final time

tfin=70;

% Number of steps

N=ceil(tfin/Ts);

% Weights of the LQ tracking performance index

Qy=1;
Sy=1;

Q=[Cy';zeros(nu,nr);-Cr']*Qy*[Cy zeros(nr,nu) -Cr];
S=[Cy';zeros(nu,nr);-Cr']*Sy*[Cy zeros(nr,nu) -Cr];

% Tuning parameter rho

rho=0.001;

R=rho*eye(nu);

% Mixed term matrix

M=zeros(nu,nx+nu+nr);

% Offline Riccati Backward Iterations

[Ftot,Ptot]=offline_lq_ric(A,B,Q,R,S,M,N);

% Online part

% Vectors collecting the state, input and time trend taken from Simulink

xseq=[];

useq=[];

tseq=[];

timesamp=[];

ref_seq=[];

% Initial perturbation w.r.t. the equilibrium

dx0=[0;0;0;0]; % Let us start from the equilibrium (it's a choice, i can pick different numerical entries)

% Initial state for the Simulink file (in this case the state is ABSOLUTE,
% i must consider the equilibrium)

xInitial=xeq+dx0;  % Equilibrium + Perturbation

% I'll consider the suboptimal strategy

F=Ftot(1,1:nx);         %  Feedback component

Fu=Ftot(1,nx+1:nx+nu);  %  Adder input component

Fv=Ftot(1,nx+nu+1:end); % Feedforward component

u_adder=zeros(nu,1);    % Intial value of the adder

% Initial state of the exosystem

xrk=pi/18; % 10 cm upwards at the end of the transient

for i=1:N;

    t=(i-1)*Ts;

    Deltau=-F*(xInitial-xeq)-Fu*u_adder-Fv*xrk;  % incremental input as sum of feedback 
                                  % and feeforward components

    u=[(ueq(1)+u_adder+Deltau);ueq(2)]';             % control law in an adder fashion u_k=u_{k-1} + Delta u_k
                                     % and feeforward components
                                     % Input Bias + Control Strategy

    result=sim("platform_sim");                % integrate the cstr differential
                                      % equation over a sampling time
                                      % interval 

    % Let us collect the states from the simulink model

    % Merge this temporary variable inside the whole state variable

    xseq=[xseq result.xout'];

    % Inputs sequence mergin

    useq=[useq u(1).*ones(1,length(result.tout))];

    % Reference to be tracked stored for graphical purposes

    ref_seq=[ref_seq Cr*xrk];
    
    % Discrete time collected for graphical purposes

    timesamp=[timesamp (i-1)*Ts];

    % Analog time

    tseq=[tseq result.tout'];

    % xInitial update

    xInitial=result.xFinal';

    % Tracking signal update

    xrk=Ar*xrk;

    % Adder update  u_k = u_{k-1} + Delta u_k

    u_adder = u_adder+Deltau;

end;

subplot(3,1,1);
plot(tseq,xseq(2,:), timesamp,ref_seq,'LineWidth',2);
grid;
title('Angle');

subplot(3,1,2);
plot(tseq,xseq(4,:),'LineWidth',2);
grid;
title('Angular velocity');

subplot(3,1,3);
plot(tseq,useq,'LineWidth',2);
grid;
title('Torque');




