clear;
close all;

%Define the initial state variables

x0=[0;0;0;0];

m=0.15;J=750;Ca=1.5;h=0.1;k=5;g=9.81;

parameters=[m,J,Ca,h,k];

%% Search for a specified operating point for the model - platform_trim.
%
% This MATLAB script is the command line equivalent of the trim model
% tab in linear analysis tool with current specifications and options.
% It produces the exact same operating points as hitting the Trim button.

% MATLAB(R) file generated by MATLAB(R) 9.12 and Simulink Control Design (TM) 6.1.
%
% Generated on: 21-May-2022 08:57:53

%% Specify the model name
model = 'platform_trim';

%% Create the operating point specification object.
opspec = operspec(model);

%% Set the constraints on the states in the model.
% - The defaults for all states are Known = false, SteadyState = true,
%   Min = -Inf, Max = Inf, dxMin = -Inf, and dxMax = Inf.

% State (1) - platform_trim/S-Function Builder
opspec.States(1).x = [0;0;0.369;0.258];
opspec.States(1).Known = [true;true;false;false];

%% Set the constraints on the inputs in the model.
% - The defaults for all inputs are Known = false, Min = -Inf, and
% Max = Inf.

% Input (1) - platform_trim/In1
opspec.Inputs(1).u = [0.256;0];
opspec.Inputs(1).Known = [false;true];

%% Set the constraints on the outputs in the model.
% - The defaults for all outputs are Known = false, Min = -Inf, and
% Max = Inf.

% Output (1) - platform_trim/Out1
% - Default model initial conditions are used to initialize optimization.


%% Create the options
opt = findopOptions('DisplayReport','iter');

%% Perform the operating point search.
[op,opreport] = findop(model,opspec,opt);
%%Exctract the equilibrium
xeq=op.States.x;
ueq=op.Inputs.u;
% Compute the linearized plant using linmod

[Ac,Bc0,Cc,Dc0]=linmod('platform_trim',xeq,ueq);

Cy=[1 0 0 0]; % monitored output (rejection and tracking)

[ny,nx]=size(Cy); % # outputs to be tracked

% Sampling time

Ts=0.5;

Bc=Bc0(:,1);  % Actuator column

Dc=Dc0(:,1);

% Plant dimensions, instrumental for LQ regulation

[nx,nu]=size(Bc);

% Let us compute the discretized plant

platform_tc=ss(Ac,Bc,Cc,Dc);

platform_td=c2d(platform_tc,Ts);

% Extract the matrices

[A0,B0,C0,D0]=ssdata(platform_td);

% Augmented state matrices instrumental for constant disturbance rejection
% and step tracking with integral control

A=[A0 zeros(nx,ny);
   Cy eye(ny)];

B=[B0;zeros(ny,nu)];

% Define the LQ parameters Q, R and M

% Weight the output
% and the state integrator (additional state)

Cz=[Cy 0
    0 0 0 0 1;
    0 0 0 0 0];

[nz,nx]=size(Cz); % In this case nx takes into consideration the augmented
                  % state

sqrtrho=.01;

Dzu=sqrtrho*[0;0;1];

% Final simulation time

tfin=60;

% Number of steps

N=ceil(tfin/Ts);

% Online part

% Vectors collecting the state, input and time trend taken from Simulink

xseq=[];

useq=[];

tseq=[];

ref_seq=[];

timesamp=[];

% Initial augmented state which depicts a perturbation w.r.t. to the equilibrium
% for LMI sake it is relevant to choose an non-zero initial state
% to "numerically activate" the LMIs. Notice that the optimal gain F does
% not depend from the choice of the initial state (it is always the same,
% regardless of dx0)

dx0=[0;0;0;0;0.5];

% Initial state of the Simulink file

xInitial=xeq+dx0(1:4);

% LMI Section

% Silent optimization

ops=sdpsettings('verbose',0);

% LMI variables alpha, Y, K

alpha=sdpvar(1);

Y=sdpvar(nx);

K=sdpvar(nu,nx);


% LMI constraints


% Normalized Upper bound


V1=[1 dx0';
    dx0 Y] >= 0;


% Y positive

V2=Y >= 0;

% Riccati discrete time inequality (LMI version)

% This is the Lyapunov condition

% (A-B*F)^T*X*(A-B*F)-X+(Cz-Dzu*F)^T*X*(Cz-Dzu*F) <= 0

% Converted in LMI via Schur Complements and Variable substitutions


V3 = [Y Y*A'-K'*B' Y*Cz'-K'*Dzu';
      A*Y-B*K  Y zeros(nx,nz);
      Cz*Y-Dzu*K zeros(nz,nx) alpha*eye(nz)] >= 0;

% Constraints alltogether

V=[V1,V2,V3];

% Optimize

lmi_result=optimize(V,alpha,ops);

% Extract F and X (original variables)

F_lmi = double(K)*inv(double(Y));

X_lmi = double(alpha)*inv(double(Y));

%

[nx,nu] = size(B0); % Original state and input dimensions

%

F=F_lmi(1:nx);         % Feedback Gain

Fq=F_lmi(nx+1:ny+nx);   % Integrator Gain

%

qk=0;   % Integrator intial value

r=0.1;  % Step Input Amplitude to be tracked

result=sim("platform_simulink_rejection_tracking");

plot(result.tout,result.output(:,2),result.tout,result.output(:,1),LineWidth=2);
grid;
title('Position Tracking and Disturbance Rejection (Disturbance acting at t=15 secs)');


